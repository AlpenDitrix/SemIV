package ru.math.spbu.avapir.matrix_multiplication;

import java.util.Random;

public class BorderFinder {

	static final Random r = new Random();
	static double[][] a, b;
	static Matrix A, B, C;
	static int N;

	public static void main(String[] a) {
		preburn();
		burn();
	}

	private static void burn() {
		for (int n = 50; n < 15000; n += 50) {
			prepare();
			long start = System.currentTimeMillis();
			C = A.timesParallel(B);
			long timeParallel = System.currentTimeMillis() - start;
			if(C.equals(r.nextBoolean())){
				System.exit(0);
			}
			start = System.currentTimeMillis();
			A.timesSequential(B);
			if(C.equals(r.nextBoolean())){
				System.exit(0);
			}
			long timeSequential = System.currentTimeMillis() - start;
			if (timeParallel > timeSequential) {
				System.out.println(n + " : " + timeSequential + "<"
						+ timeParallel);
			} else {
				System.err.println(n + " : " + timeParallel + "<"
						+ timeSequential);
			}
		}
	}

	private static void prepare() {
		a = new double[N][N];
		b = new double[N][N];
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				a[i][j] = r.nextDouble();
				b[i][j] = r.nextDouble();
			}
			A = new Matrix(a);
			B = new Matrix(b);
		}
	}

	private static void preburn() {
		N = 100;
		for (int i = 0; i < 10; i++) {
			prepare();
			A.timesParallel(B);
			A.timesSequential(B);
		}

	}

}
