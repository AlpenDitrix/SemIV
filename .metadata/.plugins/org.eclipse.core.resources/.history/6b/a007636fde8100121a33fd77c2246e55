package ru.math.spbu.avapir.matrix_multiplication.tests;

import java.util.Random;

import ru.math.spbu.avapir.matrix_multiplication.Matrix;

public class PerfomanceTests {

	private static final int RUN = 30;
	static int N = 1000;
	static int M = 250;
	static int P = 250;
	static int Q = 1000;
	static int PRERUN_COUNT = 10;
	static Random r = new Random();

	static Matrix A;
	static Matrix B;
	static double[][] a;
	static double[][] b;

	/**
	 * DNIWE EBANOE 
	 * 
	 * @param args
	 */
	public static void main(String[] args) {
		prerunSeq();
		runSeq();
		prerunPar();
		runPar();
	}

	private static void runSeq() {
		// TODO Auto-generated method stub

	}

	private static void prerunSeq() {
		for (int i = 0; i < PRERUN_COUNT; i++) {
			prepare();
			long time = System.currentTimeMillis();
			A.timesParallel(B);
			System.out.println(":" + (System.currentTimeMillis() - time));
		}
		System.out.println("Prerun complited");
	}

	private static void runPar() {
		long totalTime = 0;
		for (int i = 0; i < RUN; i++) {
			prepare();
			long start = System.currentTimeMillis();
			A.times(B);
			totalTime += System.currentTimeMillis() - start;
			System.out.println(System.currentTimeMillis() - start);
		}
		System.out.println(totalTime / RUN);
	}

	private static void prerunPar() {
		for (int i = 0; i < PRERUN_COUNT; i++) {
			prepare();
			A.timesParallel(B);
			System.out.println(PRERUN_COUNT - i);
		}
		System.out.println("Prerun complited");
	}

	private static void prepare() {
		a = new double[N][M];
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				a[i][j] = r.nextDouble();
			}
		}
		b = new double[P][Q];
		for (int i = 0; i < P; i++) {
			for (int j = 0; j < Q; j++) {
				b[i][j] = r.nextDouble();
			}
		}
		A = new Matrix(a);
		B = new Matrix(b);
	}

}
